<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sungsu9022.github.io/</id><title>Sungsu's Tech Blog</title><subtitle>Java, Kotlin, Spring, MSA, Back-end, Software engineering, Software Architecture, computer science</subtitle> <updated>2024-09-14T21:16:39+09:00</updated> <author> <name>sungsu9022</name> <uri>https://sungsu9022.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://sungsu9022.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://sungsu9022.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 sungsu9022 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Spring] Spring6 Http Interface Client - 1</title><link href="https://sungsu9022.github.io/posts/devlog-spring6-http-clients-1/" rel="alternate" type="text/html" title="[Spring] Spring6 Http Interface Client - 1" /><published>2024-09-13T21:47:00+09:00</published> <updated>2024-09-13T21:47:00+09:00</updated> <id>https://sungsu9022.github.io/posts/devlog-spring6-http-clients-1/</id> <content src="https://sungsu9022.github.io/posts/devlog-spring6-http-clients-1/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="Spring" /> <summary> 1. 어떤 HttpClient을 사용할것인가? Spring을 이용한 Application을 개발할 때, 다른 서버와의 HTTP 통신이 필요할 경우가 많다. 이때 어떤 HttpClient를 사용할지 결정하는 것은 중요한 선택입니다. 다양한 HttpClient 옵션이 있지만, 각 방식마다 장단점이 있다. 여기서는 대표적인 HttpClient들을 비교하여 어떤 선택이 가장 적합할지 살펴보자. 1.1 순수 HttpClient 라이브러리를 사용하는 방법 순수 HttpClient 라이브러리는 Java 11부터 제공되는 java.net.http.HttpClient를 사용하는 방법이다. 이 라이브러리는 Java 표준 라이브러리로, 외부 라이브러리 의존성 없이 HTTP 요청을 보낼 수 있다. ... </summary> </entry> <entry><title>[엘라스틱서치 바이블] 8. 엘라스틱서치의 내부 동작 상세</title><link href="https://sungsu9022.github.io/posts/es-bible-8/" rel="alternate" type="text/html" title="[엘라스틱서치 바이블] 8. 엘라스틱서치의 내부 동작 상세" /><published>2024-02-03T21:45:00+09:00</published> <updated>2024-02-03T21:45:00+09:00</updated> <id>https://sungsu9022.github.io/posts/es-bible-8/</id> <content src="https://sungsu9022.github.io/posts/es-bible-8/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="Elasticsearch" /> <summary> [엘라스틱서치 바이블] 8. 엘라스틱서치의 내부 동작 상세 ES의 기본 구조와 핵심 동작 양상, 주요 기능, 서비스 환경을 구축하고 운영하며 장애에 대응하는 방법을 학습한것만으로도 ES를 활용한 개발에 큰 어려움이 없을것이다. 다만, 고도화가 필요하다면, 내부 동작을 구체적으로 이해하는것이 중요하다. 8.1 엘라스틱서치의 데이터 분산 처리 과정 데이터 읽기와 쓰기 작업 요청이 들어왔을떄 ES 내부가 어떤 단계를 거쳐 동작하는지 살펴본다. 8.1.1 쓰기 작업 시 엘라스틱서치 동작과 동시성 제어 쓰기 작업은 조정 단계(coordination stage), 주 샤드 단계(primary stage), 복제 단계(replica stage)의 3단계로 수행된다. 조정 단계 ... </summary> </entry> <entry><title>[엘라스틱서치 바이블] 5. 서비스 환경에 클러스터 구성</title><link href="https://sungsu9022.github.io/posts/es-bible-5/" rel="alternate" type="text/html" title="[엘라스틱서치 바이블] 5. 서비스 환경에 클러스터 구성" /><published>2024-01-06T19:53:00+09:00</published> <updated>2024-01-06T19:53:00+09:00</updated> <id>https://sungsu9022.github.io/posts/es-bible-5/</id> <content src="https://sungsu9022.github.io/posts/es-bible-5/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="Elasticsearch" /> <summary> [엘라스틱서치 바이블] 5. 서비스 환경에 클러스터 구성 5.1 운영 환경을 위한 설정과 클러스터 구성 5.1.1 노드 설정과 노드 역할 ES 클러스터 내에서 각 노드가 수행하는 역할의 종류에 대해 알아보자 노드 역할 클러스터 구성시 반드시 노드에 역할을 지정해야 한다. 지정된 역할에 따라 노드가 클러스터 내에서 어떤 작업을 담당할지 정해진다. 마스터 후보(master-eligible) 노드 노드의 역할에 master를 지정하면 해당 노드는 마스터 후보 노드가 된다. 마스터 후보 노드 중에서 선거를 통해 마스터 노드가 선출된다. 마스터 노드는 클러스터를 관리하는 역할을 수행한다. 인덳 생성이나 삭제, 어떤 샤드를 어느 노드에 할당할 것인지 등 중요한 작업을 수행한다... </summary> </entry> <entry><title>[엘라스틱서치 바이블] 4. 데이터 다루기 -3(ES Client 라이브러리)</title><link href="https://sungsu9022.github.io/posts/es-bible-4-3/" rel="alternate" type="text/html" title="[엘라스틱서치 바이블] 4. 데이터 다루기 -3(ES Client 라이브러리)" /><published>2023-12-31T18:35:00+09:00</published> <updated>2024-01-07T19:14:31+09:00</updated> <id>https://sungsu9022.github.io/posts/es-bible-4-3/</id> <content src="https://sungsu9022.github.io/posts/es-bible-4-3/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="Elasticsearch" /> <summary> 4. 데이터 다루기 -3(ES Client 라이브러리) 4.5 서비스 코드에서 엘라스틱서치 클라이언트 이용 지금까지 배웠던 REST API를 호출해서 ES에 작업을 요청할수도 있겠으나, 이런 방식보다는 ES에서 공식적으로 제공하는 Client 라이브러리를 활용하면 좀 더 간편하게 코드를 작성할 수 있고, 유지보수도 더 쉽다. Java, Javascript, Python, Go, .NET 등 다양한 언어에서 사용할수 있는 클라이언트 라이브러리를 제공함. JVM에서 지원하는 클라이언트 transport 클라이언트 Deprecated된지 오래됨. 8버전부터는 완전히 제거됨. 저수준 Rest Client 모든 버전 호환되나, 단순 httpClient 수준으로만 제공됨. 고수준... </summary> </entry> <entry><title>[엘라스틱서치 바이블] 4. 데이터 다루기 -2(집계)</title><link href="https://sungsu9022.github.io/posts/es-bible-4-2/" rel="alternate" type="text/html" title="[엘라스틱서치 바이블] 4. 데이터 다루기 -2(집계)" /><published>2023-12-24T21:19:00+09:00</published> <updated>2023-12-30T16:42:33+09:00</updated> <id>https://sungsu9022.github.io/posts/es-bible-4-2/</id> <content src="https://sungsu9022.github.io/posts/es-bible-4-2/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="Elasticsearch" /> <summary> 4. 데이터 다루기 -2 4.4 집계 ES는 검색을 수행한 뒤에 그 결과를 집계(aggregation)하는 다양한 방법을 제공한다. 4.4.1 집계 기본 집계는 검색의 연장선 집계의 대상을 추려낼 검색 조건을 검색 API에 담은 뒤 집계 조건을 추가해서 호출한다. sum ### sum GET /kibana_sample_data_ecommerce/_search Host: localhost:9200 Content-Type: application/json { "size": 0, "query": { "term": { "currency" : { "value": "EUR" } } }, "aggs": { "my-sum... </summary> </entry> </feed>
